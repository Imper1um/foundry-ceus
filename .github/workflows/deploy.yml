name: Deploy Module

on:
  push:
    branches:
      - deploy  # Run this workflow when you push to the 'deploy' branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Install jq
        run: sudo apt-get install jq

      - name: Install GitHub CLI
        run: |
            curl -LO https://github.com/cli/cli/releases/download/v2.2.0/gh_2.2.0_linux_amd64.deb
            sudo dpkg -i gh_2.2.0_linux_amd64.deb


      - name: Authenticate with GitHub CLI
        run: echo ${{ secrets.FINE_GRAINED_PAT }} | gh auth login --with-token

      - name: Extract and Increment Version
        run: |
          VERSION=$(jq -r '.version' module.json)
          NEW_VERSION=$(echo $VERSION | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          jq --arg NEW_VERSION "$NEW_VERSION" '.version = $NEW_VERSION' module.json > temp.json
          mv temp.json module.json

      - name: Re-Authenticate with GitHub CLI
        run: echo ${{ secrets.FINE_GRAINED_PAT }} | gh auth login --with-token

      - name: Create GitHub Release
        run: |
          gh release create ${{ env.NEW_VERSION }} -t "Release ${{ env.NEW_VERSION }}" -n "Release notes for ${{ env.NEW_VERSION }}"
          
      - name: Update module.json with Download URL
        run: |
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ env.NEW_VERSION }}/module.zip"
          jq --arg DOWNLOAD_URL "$DOWNLOAD_URL" '.download = $DOWNLOAD_URL' module.json > temp.json
          mv temp.json module.json

      - name: Create ZIP and TAR.GZ
        run: |
          zip -r module.zip module.json css/* lang/* src/* templates/*
          tar -zcvf module.tar.gz module.json css lang src templates

      - name: Upload Assets to GitHub Release
        run: |
          gh release upload ${{ env.NEW_VERSION }} module.zip module.tar.gz module.json

      - name: Commit and Push Updated module.json to deploy branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add module.json
          git commit -m "Update version in module.json"
          git push origin deploy

      - name: Create Pull Request to push new version back to master
        uses: repo-sync/pull-request@v2
        with:
          source_branch: "deploy"
          destination_branch: "master"
          pr_title: "Deploy to Master"
          pr_body: "Auto PR to update version number."
          pr_label: "automerge"
        env:
          GITHUB_TOKEN: ${{ secrets.FINE_GRAINED_PAT }}
